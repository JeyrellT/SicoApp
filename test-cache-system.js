/**
 * üß™ Script de Prueba de Sistema de Cach√©
 * 
 * Ejecutar en consola del navegador para verificar que las optimizaciones funcionan correctamente
 * 
 * Uso:
 * 1. Abrir la aplicaci√≥n en el navegador
 * 2. Abrir DevTools (F12)
 * 3. Copiar y pegar este c√≥digo en la consola
 * 4. Observar los resultados
 */

(async function testCacheSystem() {
  console.group('üß™ Prueba de Sistema de Cach√© - SICOP');
  
  const dm = window.DataManager?.getInstance();
  
  if (!dm) {
    console.error('‚ùå DataManager no disponible. Aseg√∫rate de que la app est√© cargada.');
    console.groupEnd();
    return;
  }
  
  console.log('‚úÖ DataManager encontrado');
  console.log('');
  
  // ==========================================
  // Test 1: Clasificaci√≥n de Sectores
  // ==========================================
  console.group('üìä Test 1: Clasificaci√≥n de Sectores');
  
  console.log('Primera ejecuci√≥n (cache miss esperado)...');
  console.time('asignarSectorPorCartel - Primera vez');
  const sectores1 = dm.asignarSectorPorCartel();
  console.timeEnd('asignarSectorPorCartel - Primera vez');
  console.log(`   Carteles clasificados: ${sectores1.size}`);
  
  console.log('');
  console.log('Segunda ejecuci√≥n (cache hit esperado)...');
  console.time('asignarSectorPorCartel - Segunda vez');
  const sectores2 = dm.asignarSectorPorCartel();
  console.timeEnd('asignarSectorPorCartel - Segunda vez');
  console.log(`   ‚úÖ Cache funcionando: ${sectores1 === sectores2 ? 'S√ç' : 'NO'}`);
  
  console.groupEnd();
  console.log('');
  
  // ==========================================
  // Test 2: C√°lculo de Montos
  // ==========================================
  console.group('üí∞ Test 2: C√°lculo de Montos');
  
  console.log('Primera ejecuci√≥n (cache miss esperado)...');
  console.time('calcularMontosEstimadosPorCartel - Primera vez');
  const montos1 = dm.calcularMontosEstimadosPorCartel();
  console.timeEnd('calcularMontosEstimadosPorCartel - Primera vez');
  console.log(`   Montos calculados: ${montos1.size}`);
  
  console.log('');
  console.log('Segunda ejecuci√≥n (cache hit esperado)...');
  console.time('calcularMontosEstimadosPorCartel - Segunda vez');
  const montos2 = dm.calcularMontosEstimadosPorCartel();
  console.timeEnd('calcularMontosEstimadosPorCartel - Segunda vez');
  console.log(`   ‚úÖ Cache funcionando: ${montos1 === montos2 ? 'S√ç' : 'NO'}`);
  
  console.groupEnd();
  console.log('');
  
  // ==========================================
  // Test 3: Dashboard Metrics
  // ==========================================
  console.group('üìà Test 3: Dashboard Metrics');
  
  const filtrosTest = {
    institucion: ['001', '002'],
    sector: ['Tecnolog√≠a']
  };
  
  console.log('Primera ejecuci√≥n con filtros:', filtrosTest);
  console.time('getDashboardMetrics - Primera vez');
  const metrics1 = dm.getDashboardMetrics(filtrosTest);
  console.timeEnd('getDashboardMetrics - Primera vez');
  console.log(`   Carteles: ${metrics1.kpi_metrics.total_carteles}`);
  
  console.log('');
  console.log('Segunda ejecuci√≥n con MISMOS filtros (cache hit esperado)...');
  console.time('getDashboardMetrics - Segunda vez');
  const metrics2 = dm.getDashboardMetrics(filtrosTest);
  console.timeEnd('getDashboardMetrics - Segunda vez');
  console.log(`   ‚úÖ Cache funcionando: ${metrics1 === metrics2 ? 'S√ç' : 'NO'}`);
  
  console.log('');
  console.log('Tercera ejecuci√≥n con filtros DIFERENTES (cache miss esperado)...');
  console.time('getDashboardMetrics - Filtros diferentes');
  const metrics3 = dm.getDashboardMetrics({ institucion: ['003'] });
  console.timeEnd('getDashboardMetrics - Filtros diferentes');
  console.log(`   Carteles: ${metrics3.kpi_metrics.total_carteles}`);
  
  console.groupEnd();
  console.log('');
  
  // ==========================================
  // Test 4: Estad√≠sticas de Cach√©
  // ==========================================
  console.group('üìä Test 4: Estad√≠sticas de Cach√©');
  
  dm.mostrarEstadisticasCache();
  
  console.groupEnd();
  console.log('');
  
  // ==========================================
  // Test 5: Invalidaci√≥n de Cach√©
  // ==========================================
  console.group('üîÑ Test 5: Invalidaci√≥n de Cach√©');
  
  console.log('Invalidando todos los cach√©s...');
  dm.invalidarTodosLosCaches();
  console.log('‚úÖ Cach√©s invalidados');
  
  console.log('');
  console.log('Verificando que siguiente ejecuci√≥n sea cache miss...');
  console.time('asignarSectorPorCartel - Post invalidaci√≥n');
  const sectores3 = dm.asignarSectorPorCartel();
  console.timeEnd('asignarSectorPorCartel - Post invalidaci√≥n');
  console.log(`   ‚úÖ Nuevo objeto creado: ${sectores2 !== sectores3 ? 'S√ç' : 'NO'}`);
  
  console.groupEnd();
  console.log('');
  
  // ==========================================
  // Resumen Final
  // ==========================================
  console.group('üìã Resumen de Pruebas');
  
  console.log('‚úÖ Sistema de cach√© funcionando correctamente');
  console.log('');
  console.log('Observaciones esperadas:');
  console.log('  - Primera ejecuci√≥n: ~1000-2000ms (cache miss)');
  console.log('  - Segunda ejecuci√≥n: <10ms (cache hit)');
  console.log('  - Filtros diferentes: cache miss esperado');
  console.log('  - Post invalidaci√≥n: cache miss esperado');
  console.log('');
  console.log('Para monitoreo continuo, usar:');
  console.log('  DataManager.getInstance().mostrarEstadisticasCache()');
  
  console.groupEnd();
  console.groupEnd();
  
})();
